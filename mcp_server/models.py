# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:47:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AcceptAdministratorInvitationResponse(BaseModel):
    pass


class AcceptInvitationResponse(BaseModel):
    pass


class AccountId(RootModel[constr(min_length=12, max_length=12)]):
    root: constr(min_length=12, max_length=12)


class AccountIds(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., max_length=50, min_length=1)


class AdminStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLE_IN_PROGRESS = 'DISABLE_IN_PROGRESS'


class ArchiveFindingsResponse(BaseModel):
    pass


class AutoEnableMembers(Enum):
    NEW = 'NEW'
    ALL = 'ALL'
    NONE = 'NONE'


class BadRequestException(RootModel[Any]):
    root: Any


class Boolean(RootModel[bool]):
    root: bool


class BucketPolicy(BaseModel):
    AllowsPublicReadAccess: Optional[Boolean] = None
    AllowsPublicWriteAccess: Optional[Boolean] = None


class ClientToken(RootModel[constr(min_length=0, max_length=64)]):
    root: constr(min_length=0, max_length=64)


class CoverageFilterCriterionKey(Enum):
    ACCOUNT_ID = 'ACCOUNT_ID'
    CLUSTER_NAME = 'CLUSTER_NAME'
    RESOURCE_TYPE = 'RESOURCE_TYPE'
    COVERAGE_STATUS = 'COVERAGE_STATUS'
    ADDON_VERSION = 'ADDON_VERSION'


class CoverageSortKey(Enum):
    ACCOUNT_ID = 'ACCOUNT_ID'
    CLUSTER_NAME = 'CLUSTER_NAME'
    COVERAGE_STATUS = 'COVERAGE_STATUS'
    ISSUE = 'ISSUE'
    ADDON_VERSION = 'ADDON_VERSION'
    UPDATED_AT = 'UPDATED_AT'


class CoverageStatisticsType(Enum):
    COUNT_BY_RESOURCE_TYPE = 'COUNT_BY_RESOURCE_TYPE'
    COUNT_BY_COVERAGE_STATUS = 'COUNT_BY_COVERAGE_STATUS'


class CoverageStatisticsTypeList(RootModel[List[CoverageStatisticsType]]):
    root: List[CoverageStatisticsType]


class CoverageStatus(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'


class CreateSampleFindingsResponse(BaseModel):
    pass


class CriterionKey(Enum):
    EC2_INSTANCE_ARN = 'EC2_INSTANCE_ARN'
    SCAN_ID = 'SCAN_ID'
    ACCOUNT_ID = 'ACCOUNT_ID'
    GUARDDUTY_FINDING_ID = 'GUARDDUTY_FINDING_ID'
    SCAN_START_TIME = 'SCAN_START_TIME'
    SCAN_STATUS = 'SCAN_STATUS'


class DataSource(Enum):
    FLOW_LOGS = 'FLOW_LOGS'
    CLOUD_TRAIL = 'CLOUD_TRAIL'
    DNS_LOGS = 'DNS_LOGS'
    S3_LOGS = 'S3_LOGS'
    KUBERNETES_AUDIT_LOGS = 'KUBERNETES_AUDIT_LOGS'
    EC2_MALWARE_SCAN = 'EC2_MALWARE_SCAN'


class DataSourceList(RootModel[List[DataSource]]):
    root: List[DataSource]


class DataSourceStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class DeclineInvitationsRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')


class DeleteDetectorRequest(BaseModel):
    pass


class DeleteDetectorResponse(BaseModel):
    pass


class DeleteFilterRequest(BaseModel):
    pass


class DeleteFilterResponse(BaseModel):
    pass


class DeleteIPSetRequest(BaseModel):
    pass


class DeleteIPSetResponse(BaseModel):
    pass


class DeleteInvitationsRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')


class DeleteMembersRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')


class DeletePublishingDestinationRequest(BaseModel):
    pass


class DeletePublishingDestinationResponse(BaseModel):
    pass


class DeleteThreatIntelSetRequest(BaseModel):
    pass


class DeleteThreatIntelSetResponse(BaseModel):
    pass


class DescribeOrganizationConfigurationRequest(BaseModel):
    pass


class DescribePublishingDestinationRequest(BaseModel):
    pass


class DestinationType(Enum):
    S3 = 'S3'


class DetectorFeature(Enum):
    S3_DATA_EVENTS = 'S3_DATA_EVENTS'
    EKS_AUDIT_LOGS = 'EKS_AUDIT_LOGS'
    EBS_MALWARE_PROTECTION = 'EBS_MALWARE_PROTECTION'
    RDS_LOGIN_EVENTS = 'RDS_LOGIN_EVENTS'
    EKS_RUNTIME_MONITORING = 'EKS_RUNTIME_MONITORING'
    LAMBDA_NETWORK_LOGS = 'LAMBDA_NETWORK_LOGS'


class DetectorFeatureResult(Enum):
    FLOW_LOGS = 'FLOW_LOGS'
    CLOUD_TRAIL = 'CLOUD_TRAIL'
    DNS_LOGS = 'DNS_LOGS'
    S3_DATA_EVENTS = 'S3_DATA_EVENTS'
    EKS_AUDIT_LOGS = 'EKS_AUDIT_LOGS'
    EBS_MALWARE_PROTECTION = 'EBS_MALWARE_PROTECTION'
    RDS_LOGIN_EVENTS = 'RDS_LOGIN_EVENTS'
    EKS_RUNTIME_MONITORING = 'EKS_RUNTIME_MONITORING'
    LAMBDA_NETWORK_LOGS = 'LAMBDA_NETWORK_LOGS'


class DetectorId(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class DetectorIds(RootModel[List[DetectorId]]):
    root: List[DetectorId] = Field(..., max_length=50, min_length=0)


class DetectorStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class DisableOrganizationAdminAccountResponse(BaseModel):
    pass


class DisassociateFromAdministratorAccountRequest(BaseModel):
    pass


class DisassociateFromAdministratorAccountResponse(BaseModel):
    pass


class DisassociateFromMasterAccountRequest(BaseModel):
    pass


class DisassociateFromMasterAccountResponse(BaseModel):
    pass


class DisassociateMembersRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')


class Double(RootModel[float]):
    root: float


class EbsSnapshotPreservation(Enum):
    NO_RETENTION = 'NO_RETENTION'
    RETENTION_WITH_FINDING = 'RETENTION_WITH_FINDING'


class Email(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class EnableOrganizationAdminAccountResponse(BaseModel):
    pass


class FeatureAdditionalConfiguration(Enum):
    EKS_ADDON_MANAGEMENT = 'EKS_ADDON_MANAGEMENT'


class FeatureStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Feedback(Enum):
    USEFUL = 'USEFUL'
    NOT_USEFUL = 'NOT_USEFUL'


class FilterAction(Enum):
    NOOP = 'NOOP'
    ARCHIVE = 'ARCHIVE'


class FilterDescription(RootModel[constr(min_length=0, max_length=512)]):
    root: constr(min_length=0, max_length=512)


class FilterName(RootModel[constr(min_length=3, max_length=64)]):
    root: constr(min_length=3, max_length=64)


class FilterNames(RootModel[List[FilterName]]):
    root: List[FilterName] = Field(..., max_length=50, min_length=0)


class FilterRank(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class FindingId(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class FindingIds(RootModel[List[FindingId]]):
    root: List[FindingId] = Field(..., max_length=50, min_length=0)


class FindingPublishingFrequency(Enum):
    FIFTEEN_MINUTES = 'FIFTEEN_MINUTES'
    ONE_HOUR = 'ONE_HOUR'
    SIX_HOURS = 'SIX_HOURS'


class FindingStatisticType(Enum):
    COUNT_BY_SEVERITY = 'COUNT_BY_SEVERITY'


class FindingStatisticTypes(RootModel[List[FindingStatisticType]]):
    root: List[FindingStatisticType] = Field(..., max_length=10, min_length=0)


class FindingType(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class FindingTypes(RootModel[List[FindingType]]):
    root: List[FindingType] = Field(..., max_length=50, min_length=0)


class FlowLogsConfigurationResult(BaseModel):
    Status: DataSourceStatus


class FreeTrialFeatureResult(Enum):
    FLOW_LOGS = 'FLOW_LOGS'
    CLOUD_TRAIL = 'CLOUD_TRAIL'
    DNS_LOGS = 'DNS_LOGS'
    S3_DATA_EVENTS = 'S3_DATA_EVENTS'
    EKS_AUDIT_LOGS = 'EKS_AUDIT_LOGS'
    EBS_MALWARE_PROTECTION = 'EBS_MALWARE_PROTECTION'
    RDS_LOGIN_EVENTS = 'RDS_LOGIN_EVENTS'
    EKS_RUNTIME_MONITORING = 'EKS_RUNTIME_MONITORING'
    LAMBDA_NETWORK_LOGS = 'LAMBDA_NETWORK_LOGS'


class GeoLocation(BaseModel):
    Lat: Optional[Double] = None
    Lon: Optional[Double] = None


class GetAdministratorAccountRequest(BaseModel):
    pass


class GetDetectorRequest(BaseModel):
    pass


class GetFilterRequest(BaseModel):
    pass


class GetIPSetRequest(BaseModel):
    pass


class GetInvitationsCountRequest(BaseModel):
    pass


class GetMalwareScanSettingsRequest(BaseModel):
    pass


class GetMasterAccountRequest(BaseModel):
    pass


class GetMemberDetectorsRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')


class GetMembersRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')


class GetRemainingFreeTrialDaysRequest(BaseModel):
    AccountIds_1: Optional[AccountIds] = Field(None, alias='AccountIds')


class GetThreatIntelSetRequest(BaseModel):
    pass


class GuardDutyArn(
    RootModel[
        constr(
            pattern=r'^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
    )


class InstanceArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov):[a-z]+:[a-z]+(-[0-9]+|-[a-z]+)+:([0-9]{12}):[a-z\-]+\/[a-zA-Z0-9]*$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov):[a-z]+:[a-z]+(-[0-9]+|-[a-z]+)+:([0-9]{12}):[a-z\-]+\/[a-zA-Z0-9]*$'
    )


class Integer(RootModel[int]):
    root: int


class IntegerValueWithMax(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class InternalServerErrorException(RootModel[Any]):
    root: Any


class IpSetFormat(Enum):
    TXT = 'TXT'
    STIX = 'STIX'
    OTX_CSV = 'OTX_CSV'
    ALIEN_VAULT = 'ALIEN_VAULT'
    PROOF_POINT = 'PROOF_POINT'
    FIRE_EYE = 'FIRE_EYE'


class IpSetStatus(Enum):
    INACTIVE = 'INACTIVE'
    ACTIVATING = 'ACTIVATING'
    ACTIVE = 'ACTIVE'
    DEACTIVATING = 'DEACTIVATING'
    ERROR = 'ERROR'
    DELETE_PENDING = 'DELETE_PENDING'
    DELETED = 'DELETED'


class KubernetesAuditLogsConfiguration(BaseModel):
    Enable: Boolean


class KubernetesAuditLogsConfigurationResult(BaseModel):
    Status: DataSourceStatus


class KubernetesConfiguration(BaseModel):
    AuditLogs: KubernetesAuditLogsConfiguration


class KubernetesConfigurationResult(BaseModel):
    AuditLogs: KubernetesAuditLogsConfigurationResult


class ListDetectorsRequest(BaseModel):
    pass


class ListFiltersRequest(BaseModel):
    pass


class ListIPSetsRequest(BaseModel):
    pass


class ListInvitationsRequest(BaseModel):
    pass


class ListMembersRequest(BaseModel):
    pass


class ListOrganizationAdminAccountsRequest(BaseModel):
    pass


class ListPublishingDestinationsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ListThreatIntelSetsRequest(BaseModel):
    pass


class Location(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class Long(RootModel[int]):
    root: int


class LongValue(RootModel[int]):
    root: int


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class Name(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class NonEmptyString(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class OrderBy(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class OrgFeature(Enum):
    S3_DATA_EVENTS = 'S3_DATA_EVENTS'
    EKS_AUDIT_LOGS = 'EKS_AUDIT_LOGS'
    EBS_MALWARE_PROTECTION = 'EBS_MALWARE_PROTECTION'
    RDS_LOGIN_EVENTS = 'RDS_LOGIN_EVENTS'
    EKS_RUNTIME_MONITORING = 'EKS_RUNTIME_MONITORING'
    LAMBDA_NETWORK_LOGS = 'LAMBDA_NETWORK_LOGS'


class OrgFeatureAdditionalConfiguration(Enum):
    EKS_ADDON_MANAGEMENT = 'EKS_ADDON_MANAGEMENT'


class OrgFeatureStatus(Enum):
    NEW = 'NEW'
    NONE = 'NONE'


class OrganizationAdditionalConfiguration(BaseModel):
    AutoEnable: Optional[OrgFeatureStatus] = None
    Name: Optional[OrgFeatureAdditionalConfiguration] = None


class OrganizationAdditionalConfigurationResult(BaseModel):
    AutoEnable: Optional[OrgFeatureStatus] = None
    Name: Optional[OrgFeatureAdditionalConfiguration] = None


class OrganizationAdditionalConfigurationResults(
    RootModel[List[OrganizationAdditionalConfigurationResult]]
):
    root: List[OrganizationAdditionalConfigurationResult]


class OrganizationAdditionalConfigurations(
    RootModel[List[OrganizationAdditionalConfiguration]]
):
    root: List[OrganizationAdditionalConfiguration]


class OrganizationEbsVolumes(BaseModel):
    AutoEnable: Optional[Boolean] = None


class OrganizationEbsVolumesResult(BaseModel):
    AutoEnable: Optional[Boolean] = None


class OrganizationFeatureConfiguration(BaseModel):
    AdditionalConfiguration: Optional[OrganizationAdditionalConfigurations] = None
    AutoEnable: Optional[OrgFeatureStatus] = None
    Name: Optional[OrgFeature] = None


class OrganizationFeatureConfigurationResult(BaseModel):
    AdditionalConfiguration: Optional[OrganizationAdditionalConfigurationResults] = None
    AutoEnable: Optional[OrgFeatureStatus] = None
    Name: Optional[OrgFeature] = None


class OrganizationFeaturesConfigurations(
    RootModel[List[OrganizationFeatureConfiguration]]
):
    root: List[OrganizationFeatureConfiguration]


class OrganizationFeaturesConfigurationsResults(
    RootModel[List[OrganizationFeatureConfigurationResult]]
):
    root: List[OrganizationFeatureConfigurationResult]


class OrganizationKubernetesAuditLogsConfiguration(BaseModel):
    AutoEnable: Boolean


class OrganizationKubernetesAuditLogsConfigurationResult(BaseModel):
    AutoEnable: Boolean


class OrganizationKubernetesConfiguration(BaseModel):
    AuditLogs: OrganizationKubernetesAuditLogsConfiguration


class OrganizationKubernetesConfigurationResult(BaseModel):
    AuditLogs: OrganizationKubernetesAuditLogsConfigurationResult


class OrganizationS3LogsConfiguration(BaseModel):
    AutoEnable: Boolean


class OrganizationS3LogsConfigurationResult(BaseModel):
    AutoEnable: Boolean


class OrganizationScanEc2InstanceWithFindings(BaseModel):
    EbsVolumes: Optional[OrganizationEbsVolumes] = None


class OrganizationScanEc2InstanceWithFindingsResult(BaseModel):
    EbsVolumes: Optional[OrganizationEbsVolumesResult] = None


class PositiveLong(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class PublishingStatus(Enum):
    PENDING_VERIFICATION = 'PENDING_VERIFICATION'
    PUBLISHING = 'PUBLISHING'
    UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY = (
        'UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY'
    )
    STOPPED = 'STOPPED'


class ResourceDetails(BaseModel):
    InstanceArn_1: Optional[InstanceArn] = Field(None, alias='InstanceArn')


class ResourceType(Enum):
    EKS = 'EKS'


class S3LogsConfiguration(BaseModel):
    Enable: Boolean


class S3LogsConfigurationResult(BaseModel):
    Status: DataSourceStatus


class ScanCriterionKey(Enum):
    EC2_INSTANCE_TAG = 'EC2_INSTANCE_TAG'


class ScanEc2InstanceWithFindings(BaseModel):
    EbsVolumes: Optional[Boolean] = None


class ScanResult(Enum):
    CLEAN = 'CLEAN'
    INFECTED = 'INFECTED'


class ScanResultDetails(BaseModel):
    ScanResult_1: Optional[ScanResult] = Field(None, alias='ScanResult')


class ScanStatus(Enum):
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class ScannedItemCount(BaseModel):
    Files: Optional[Integer] = None
    TotalGb: Optional[Integer] = None
    Volumes: Optional[Integer] = None


class SecurityContext(BaseModel):
    Privileged: Optional[Boolean] = None


class StartMonitoringMembersRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')


class StopMonitoringMembersRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')


class String(RootModel[str]):
    root: str


class SubnetIds(RootModel[List[String]]):
    root: List[String]


class Tag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class ThreatIntelSetFormat(Enum):
    TXT = 'TXT'
    STIX = 'STIX'
    OTX_CSV = 'OTX_CSV'
    ALIEN_VAULT = 'ALIEN_VAULT'
    PROOF_POINT = 'PROOF_POINT'
    FIRE_EYE = 'FIRE_EYE'


class ThreatIntelSetIds(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=50, min_length=0)


class ThreatIntelSetStatus(Enum):
    INACTIVE = 'INACTIVE'
    ACTIVATING = 'ACTIVATING'
    ACTIVE = 'ACTIVE'
    DEACTIVATING = 'DEACTIVATING'
    ERROR = 'ERROR'
    DELETE_PENDING = 'DELETE_PENDING'
    DELETED = 'DELETED'


class ThreatNames(RootModel[List[String]]):
    root: List[String]


class ThreatsDetectedItemCount(BaseModel):
    Files: Optional[Integer] = None


class Timestamp(RootModel[datetime]):
    root: datetime


class Total(BaseModel):
    Amount: Optional[String] = None
    Unit: Optional[String] = None


class TriggerDetails(BaseModel):
    Description: Optional[NonEmptyString] = None
    GuardDutyFindingId: Optional[NonEmptyString] = None


class UnarchiveFindingsRequest(BaseModel):
    FindingIds_1: FindingIds = Field(..., alias='FindingIds')


class UnarchiveFindingsResponse(BaseModel):
    pass


class UnprocessedAccount(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    Result: String


class UnprocessedAccounts(RootModel[List[UnprocessedAccount]]):
    root: List[UnprocessedAccount] = Field(..., max_length=50, min_length=0)


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateDetectorResponse(BaseModel):
    pass


class UpdateFilterResponse(BaseModel):
    Name: FilterName


class UpdateFindingsFeedbackRequest(BaseModel):
    Comments: Optional[String] = None
    Feedback_1: Feedback = Field(..., alias='Feedback')
    FindingIds_1: FindingIds = Field(..., alias='FindingIds')


class UpdateFindingsFeedbackResponse(BaseModel):
    pass


class UpdateIPSetRequest(BaseModel):
    Activate: Optional[Boolean] = None
    Location_1: Optional[Location] = Field(None, alias='Location')
    Name_1: Optional[Name] = Field(None, alias='Name')


class UpdateIPSetResponse(BaseModel):
    pass


class UpdateMalwareScanSettingsResponse(BaseModel):
    pass


class UpdateMemberDetectorsResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class UpdateOrganizationConfigurationResponse(BaseModel):
    pass


class UpdatePublishingDestinationResponse(BaseModel):
    pass


class UpdateThreatIntelSetRequest(BaseModel):
    Activate: Optional[Boolean] = None
    Location_1: Optional[Location] = Field(None, alias='Location')
    Name_1: Optional[Name] = Field(None, alias='Name')


class UpdateThreatIntelSetResponse(BaseModel):
    pass


class UsageAccountResult(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    Total_1: Optional[Total] = Field(None, alias='Total')


class UsageAccountResultList(RootModel[List[UsageAccountResult]]):
    root: List[UsageAccountResult]


class UsageDataSourceResult(BaseModel):
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    Total_1: Optional[Total] = Field(None, alias='Total')


class UsageDataSourceResultList(RootModel[List[UsageDataSourceResult]]):
    root: List[UsageDataSourceResult]


class UsageFeature(Enum):
    FLOW_LOGS = 'FLOW_LOGS'
    CLOUD_TRAIL = 'CLOUD_TRAIL'
    DNS_LOGS = 'DNS_LOGS'
    S3_DATA_EVENTS = 'S3_DATA_EVENTS'
    EKS_AUDIT_LOGS = 'EKS_AUDIT_LOGS'
    EBS_MALWARE_PROTECTION = 'EBS_MALWARE_PROTECTION'
    RDS_LOGIN_EVENTS = 'RDS_LOGIN_EVENTS'
    LAMBDA_NETWORK_LOGS = 'LAMBDA_NETWORK_LOGS'
    EKS_RUNTIME_MONITORING = 'EKS_RUNTIME_MONITORING'


class UsageFeatureList(RootModel[List[UsageFeature]]):
    root: List[UsageFeature]


class UsageFeatureResult(BaseModel):
    Feature: Optional[UsageFeature] = None
    Total_1: Optional[Total] = Field(None, alias='Total')


class UsageFeatureResultList(RootModel[List[UsageFeatureResult]]):
    root: List[UsageFeatureResult]


class UsageResourceResult(BaseModel):
    Resource: Optional[String] = None
    Total_1: Optional[Total] = Field(None, alias='Total')


class UsageResourceResultList(RootModel[List[UsageResourceResult]]):
    root: List[UsageResourceResult]


class UsageStatisticType(Enum):
    SUM_BY_ACCOUNT = 'SUM_BY_ACCOUNT'
    SUM_BY_DATA_SOURCE = 'SUM_BY_DATA_SOURCE'
    SUM_BY_RESOURCE = 'SUM_BY_RESOURCE'
    TOP_RESOURCES = 'TOP_RESOURCES'
    SUM_BY_FEATURES = 'SUM_BY_FEATURES'


class UsageStatistics(BaseModel):
    SumByAccount: Optional[UsageAccountResultList] = None
    SumByDataSource: Optional[UsageDataSourceResultList] = None
    SumByFeature: Optional[UsageFeatureResultList] = None
    SumByResource: Optional[UsageResourceResultList] = None
    TopResources: Optional[UsageResourceResultList] = None


class VolumeDetail(BaseModel):
    DeviceName: Optional[String] = None
    EncryptionType: Optional[String] = None
    KmsKeyArn: Optional[String] = None
    SnapshotArn: Optional[String] = None
    VolumeArn: Optional[String] = None
    VolumeSizeInGB: Optional[Integer] = None
    VolumeType: Optional[String] = None


class VolumeDetails(RootModel[List[VolumeDetail]]):
    root: List[VolumeDetail]


class VolumeMount(BaseModel):
    MountPath: Optional[String] = None
    Name: Optional[String] = None


class VolumeMounts(RootModel[List[VolumeMount]]):
    root: List[VolumeMount]


class AdminDisablePostRequest(BaseModel):
    adminAccountId: str = Field(
        ...,
        description='The Amazon Web Services Account ID for the organizations account to be disabled as a GuardDuty delegated administrator.',
    )


class AdminEnablePostRequest(BaseModel):
    adminAccountId: str = Field(
        ...,
        description='The Amazon Web Services Account ID for the organization account to be enabled as a GuardDuty delegated administrator.',
    )


class AutoEnableOrganizationMembers(Enum):
    NEW = 'NEW'
    ALL = 'ALL'
    NONE = 'NONE'


class DetectorDetectorIdAdministratorPostRequest(BaseModel):
    administratorId: str = Field(
        ...,
        description="The account ID of the GuardDuty administrator account whose invitation you're accepting.",
    )
    invitationId: str = Field(
        ...,
        description='The value that is used to validate the administrator account to the member account.',
    )


class SortCriteria(BaseModel):
    AttributeName: Optional[CoverageSortKey] = None
    OrderBy_1: Optional[OrderBy] = Field(None, alias='OrderBy')


class Action1(Enum):
    NOOP = 'NOOP'
    ARCHIVE = 'ARCHIVE'


class SortCriteria2(BaseModel):
    AttributeName: Optional[String] = None
    OrderBy_1: Optional[OrderBy] = Field(None, alias='OrderBy')


class DetectorDetectorIdFindingsArchivePostRequest(BaseModel):
    findingIds: List[FindingId] = Field(
        ...,
        description='The IDs of the findings that you want to archive.',
        max_length=50,
        min_length=0,
    )


class DetectorDetectorIdFindingsCreatePostRequest(BaseModel):
    findingTypes: Optional[List[FindingType]] = Field(
        None,
        description='The types of sample findings to generate.',
        max_length=50,
        min_length=0,
    )


class DetectorDetectorIdFindingsFeedbackPostRequest(BaseModel):
    comments: Optional[str] = Field(
        None, description='Additional feedback about the GuardDuty findings.'
    )
    feedback: Feedback = Field(..., description='The feedback for the finding.')
    findingIds: List[FindingId] = Field(
        ...,
        description='The IDs of the findings that you want to mark as useful or not useful.',
        max_length=50,
        min_length=0,
    )


class DetectorDetectorIdFindingsGetPostRequest(BaseModel):
    findingIds: List[FindingId] = Field(
        ...,
        description='The IDs of the findings that you want to retrieve.',
        max_length=50,
        min_length=0,
    )
    sortCriteria: Optional[SortCriteria2] = Field(
        None,
        description='Contains information about the criteria used for sorting findings.',
    )


class DetectorDetectorIdFindingsUnarchivePostRequest(BaseModel):
    findingIds: List[FindingId] = Field(
        ...,
        description='The IDs of the findings to unarchive.',
        max_length=50,
        min_length=0,
    )


class DetectorDetectorIdFreeTrialDaysRemainingPostRequest(BaseModel):
    accountIds: Optional[List[AccountId]] = Field(
        None,
        description='A list of account identifiers of the GuardDuty member account.',
        max_length=50,
        min_length=1,
    )


class Format(Enum):
    TXT = 'TXT'
    STIX = 'STIX'
    OTX_CSV = 'OTX_CSV'
    ALIEN_VAULT = 'ALIEN_VAULT'
    PROOF_POINT = 'PROOF_POINT'
    FIRE_EYE = 'FIRE_EYE'


class DetectorDetectorIdIpsetPostRequest(BaseModel):
    activate: bool = Field(
        ...,
        description='A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.',
    )
    clientToken: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The idempotency token for the create request.'
    )
    format: Format = Field(
        ..., description='The format of the file that contains the IPSet.'
    )
    location: constr(min_length=1, max_length=300) = Field(
        ..., description='The URI of the file that contains the IPSet. '
    )
    name: constr(min_length=1, max_length=300) = Field(
        ...,
        description='<p>The user-friendly name to identify the IPSet.</p> <p> Allowed characters are alphanumeric, whitespace, dash (-), and underscores (_).</p>',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to be added to a new IP set resource.'
    )


class DetectorDetectorIdIpsetIpSetIdPostRequest(BaseModel):
    activate: Optional[bool] = Field(
        None,
        description='The updated Boolean value that specifies whether the IPSet is active or not.',
    )
    location: Optional[constr(min_length=1, max_length=300)] = Field(
        None, description='The updated URI of the file that contains the IPSet. '
    )
    name: Optional[constr(min_length=1, max_length=300)] = Field(
        None,
        description='The unique ID that specifies the IPSet that you want to update.',
    )


class DetectorDetectorIdMasterPostRequest(BaseModel):
    invitationId: str = Field(
        ...,
        description='The value that is used to validate the administrator account to the member account.',
    )
    masterId: str = Field(
        ...,
        description="The account ID of the GuardDuty administrator account whose invitation you're accepting.",
    )


class DetectorDetectorIdMemberDeletePostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of account IDs of the GuardDuty member accounts that you want to delete.',
        max_length=50,
        min_length=1,
    )


class DetectorDetectorIdMemberDetectorGetPostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='The account ID of the member account.',
        max_length=50,
        min_length=1,
    )


class DetectorDetectorIdMemberDisassociatePostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of account IDs of the GuardDuty member accounts that you want to disassociate from the administrator account.',
        max_length=50,
        min_length=1,
    )


class DetectorDetectorIdMemberGetPostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of account IDs of the GuardDuty member accounts that you want to describe.',
        max_length=50,
        min_length=1,
    )


class DetectorDetectorIdMemberInvitePostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of account IDs of the accounts that you want to invite to GuardDuty as members.',
        max_length=50,
        min_length=1,
    )
    disableEmailNotification: Optional[bool] = Field(
        None,
        description='A Boolean value that specifies whether you want to disable email notification to the accounts that you are inviting to GuardDuty as members.',
    )
    message: Optional[str] = Field(
        None,
        description="The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.",
    )


class DetectorDetectorIdMemberStartPostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of account IDs of the GuardDuty member accounts to start monitoring.',
        max_length=50,
        min_length=1,
    )


class DetectorDetectorIdMemberStopPostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of account IDs for the member accounts to stop monitoring.',
        max_length=50,
        min_length=1,
    )


class DestinationProperties(BaseModel):
    DestinationArn: Optional[String] = None
    KmsKeyArn: Optional[String] = None


class DetectorDetectorIdPublishingDestinationPostRequest(BaseModel):
    clientToken: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The idempotency token for the request.'
    )
    destinationProperties: DestinationProperties = Field(
        ...,
        description='Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.',
    )
    destinationType: DestinationType = Field(
        ...,
        description='The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.',
    )


class DetectorDetectorIdPublishingDestinationDestinationIdPostRequest(BaseModel):
    destinationProperties: Optional[DestinationProperties] = Field(
        None,
        description='Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.',
    )


class DetectorDetectorIdThreatintelsetPostRequest(BaseModel):
    activate: bool = Field(
        ...,
        description='A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.',
    )
    clientToken: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The idempotency token for the create request.'
    )
    format: Format = Field(
        ..., description='The format of the file that contains the ThreatIntelSet.'
    )
    location: constr(min_length=1, max_length=300) = Field(
        ..., description='The URI of the file that contains the ThreatIntelSet. '
    )
    name: constr(min_length=1, max_length=300) = Field(
        ...,
        description='A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to be added to a new threat list resource.'
    )


class DetectorDetectorIdThreatintelsetThreatIntelSetIdPostRequest(BaseModel):
    activate: Optional[bool] = Field(
        None,
        description='The updated Boolean value that specifies whether the ThreateIntelSet is active or not.',
    )
    location: Optional[constr(min_length=1, max_length=300)] = Field(
        None,
        description='The updated URI of the file that contains the ThreateIntelSet.',
    )
    name: Optional[constr(min_length=1, max_length=300)] = Field(
        None,
        description='The unique ID that specifies the ThreatIntelSet that you want to update.',
    )


class UsageStatisticsType(Enum):
    SUM_BY_ACCOUNT = 'SUM_BY_ACCOUNT'
    SUM_BY_DATA_SOURCE = 'SUM_BY_DATA_SOURCE'
    SUM_BY_RESOURCE = 'SUM_BY_RESOURCE'
    TOP_RESOURCES = 'TOP_RESOURCES'
    SUM_BY_FEATURES = 'SUM_BY_FEATURES'


class InvitationDeclinePostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of account IDs of the Amazon Web Services accounts that sent invitations to the current member account that you want to decline invitations from.',
        max_length=50,
        min_length=1,
    )


class InvitationDeletePostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of account IDs of the Amazon Web Services accounts that sent invitations to the current member account that you want to delete invitations from.',
        max_length=50,
        min_length=1,
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ..., description='The tags to be added to a resource.'
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class AcceptAdministratorInvitationRequest(BaseModel):
    AdministratorId: String
    InvitationId: String


class AcceptInvitationRequest(BaseModel):
    InvitationId: String
    MasterId: String


class AccessControlList(BaseModel):
    AllowsPublicReadAccess: Optional[Boolean] = None
    AllowsPublicWriteAccess: Optional[Boolean] = None


class AccessKeyDetails(BaseModel):
    AccessKeyId: Optional[String] = None
    PrincipalId: Optional[String] = None
    UserName: Optional[String] = None
    UserType: Optional[String] = None


class AccountDetail(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    Email_1: Email = Field(..., alias='Email')


class AccountDetails(RootModel[List[AccountDetail]]):
    root: List[AccountDetail] = Field(..., max_length=50, min_length=1)


class AddonDetails(BaseModel):
    AddonStatus: Optional[String] = None
    AddonVersion: Optional[String] = None


class AdminAccount(BaseModel):
    AdminAccountId: Optional[String] = None
    AdminStatus_1: Optional[AdminStatus] = Field(None, alias='AdminStatus')


class AdminAccounts(RootModel[List[AdminAccount]]):
    root: List[AdminAccount] = Field(..., max_length=1, min_length=0)


class Administrator(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    InvitationId: Optional[String] = None
    InvitedAt: Optional[String] = None
    RelationshipStatus: Optional[String] = None


class AffectedResources(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class ArchiveFindingsRequest(BaseModel):
    FindingIds_1: FindingIds = Field(..., alias='FindingIds')


class BlockPublicAccess(BaseModel):
    BlockPublicAcls: Optional[Boolean] = None
    BlockPublicPolicy: Optional[Boolean] = None
    IgnorePublicAcls: Optional[Boolean] = None
    RestrictPublicBuckets: Optional[Boolean] = None


class BucketLevelPermissions(BaseModel):
    AccessControlList_1: Optional[AccessControlList] = Field(
        None, alias='AccessControlList'
    )
    BlockPublicAccess_1: Optional[BlockPublicAccess] = Field(
        None, alias='BlockPublicAccess'
    )
    BucketPolicy_1: Optional[BucketPolicy] = Field(None, alias='BucketPolicy')


class City(BaseModel):
    CityName: Optional[String] = None


class CloudTrailConfigurationResult(BaseModel):
    Status: DataSourceStatus


class Container(BaseModel):
    ContainerRuntime: Optional[String] = None
    Id: Optional[String] = None
    Image: Optional[String] = None
    ImagePrefix: Optional[String] = None
    Name: Optional[String] = None
    SecurityContext_1: Optional[SecurityContext] = Field(None, alias='SecurityContext')
    VolumeMounts_1: Optional[VolumeMounts] = Field(None, alias='VolumeMounts')


class Containers(RootModel[List[Container]]):
    root: List[Container]


class CountByCoverageStatus(RootModel[Optional[Dict[str, Long]]]):
    root: Optional[Dict[str, Long]] = None


class CountByResourceType(RootModel[Optional[Dict[str, Long]]]):
    root: Optional[Dict[str, Long]] = None


class CountBySeverity(RootModel[Optional[Dict[str, Integer]]]):
    root: Optional[Dict[str, Integer]] = None


class Country(BaseModel):
    CountryCode: Optional[String] = None
    CountryName: Optional[String] = None


class CoverageEksClusterDetails(BaseModel):
    AddonDetails_1: Optional[AddonDetails] = Field(None, alias='AddonDetails')
    ClusterName: Optional[String] = None
    CompatibleNodes: Optional[Long] = None
    CoveredNodes: Optional[Long] = None


class CoverageResourceDetails(BaseModel):
    EksClusterDetails: Optional[CoverageEksClusterDetails] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class CoverageSortCriteria(BaseModel):
    AttributeName: Optional[CoverageSortKey] = None
    OrderBy_1: Optional[OrderBy] = Field(None, alias='OrderBy')


class CoverageStatistics(BaseModel):
    CountByCoverageStatus_1: Optional[CountByCoverageStatus] = Field(
        None, alias='CountByCoverageStatus'
    )
    CountByResourceType_1: Optional[CountByResourceType] = Field(
        None, alias='CountByResourceType'
    )


class CreateFilterResponse(BaseModel):
    Name: FilterName


class CreateIPSetResponse(BaseModel):
    IpSetId: String


class CreateMembersRequest(BaseModel):
    AccountDetails_1: AccountDetails = Field(..., alias='AccountDetails')


class CreateMembersResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class CreatePublishingDestinationResponse(BaseModel):
    DestinationId: String


class CreateSampleFindingsRequest(BaseModel):
    FindingTypes_1: Optional[FindingTypes] = Field(None, alias='FindingTypes')


class CreateThreatIntelSetResponse(BaseModel):
    ThreatIntelSetId: String


class DNSLogsConfigurationResult(BaseModel):
    Status: DataSourceStatus


class DataSourceFreeTrial(BaseModel):
    FreeTrialDaysRemaining: Optional[Integer] = None


class DeclineInvitationsResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class DefaultServerSideEncryption(BaseModel):
    EncryptionType: Optional[String] = None
    KmsMasterKeyArn: Optional[String] = None


class DeleteInvitationsResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class DeleteMembersResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class Destination(BaseModel):
    DestinationId: String
    DestinationType_1: DestinationType = Field(..., alias='DestinationType')
    Status: PublishingStatus


class Destinations(RootModel[List[Destination]]):
    root: List[Destination]


class DetectorAdditionalConfiguration(BaseModel):
    Name: Optional[FeatureAdditionalConfiguration] = None
    Status: Optional[FeatureStatus] = None


class DetectorAdditionalConfigurationResult(BaseModel):
    Name: Optional[FeatureAdditionalConfiguration] = None
    Status: Optional[FeatureStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class DetectorAdditionalConfigurationResults(
    RootModel[List[DetectorAdditionalConfigurationResult]]
):
    root: List[DetectorAdditionalConfigurationResult]


class DetectorAdditionalConfigurations(
    RootModel[List[DetectorAdditionalConfiguration]]
):
    root: List[DetectorAdditionalConfiguration]


class DetectorFeatureConfiguration(BaseModel):
    AdditionalConfiguration: Optional[DetectorAdditionalConfigurations] = None
    Name: Optional[DetectorFeature] = None
    Status: Optional[FeatureStatus] = None


class DetectorFeatureConfigurationResult(BaseModel):
    AdditionalConfiguration: Optional[DetectorAdditionalConfigurationResults] = None
    Name: Optional[DetectorFeatureResult] = None
    Status: Optional[FeatureStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class DetectorFeatureConfigurations(RootModel[List[DetectorFeatureConfiguration]]):
    root: List[DetectorFeatureConfiguration]


class DetectorFeatureConfigurationsResults(
    RootModel[List[DetectorFeatureConfigurationResult]]
):
    root: List[DetectorFeatureConfigurationResult]


class DisableOrganizationAdminAccountRequest(BaseModel):
    AdminAccountId: String


class DisassociateMembersResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class DnsRequestAction(BaseModel):
    Blocked: Optional[Boolean] = None
    Domain: Optional[String] = None
    Protocol: Optional[String] = None


class DomainDetails(BaseModel):
    Domain: Optional[String] = None


class EbsVolumeDetails(BaseModel):
    ScannedVolumeDetails: Optional[VolumeDetails] = None
    SkippedVolumeDetails: Optional[VolumeDetails] = None


class EbsVolumesResult(BaseModel):
    Reason: Optional[String] = None
    Status: Optional[DataSourceStatus] = None


class EksClusterDetails(BaseModel):
    Arn: Optional[String] = None
    CreatedAt: Optional[Timestamp] = None
    Name: Optional[String] = None
    Status: Optional[String] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VpcId: Optional[String] = None


class EnableOrganizationAdminAccountRequest(BaseModel):
    AdminAccountId: String


class Eq(RootModel[List[String]]):
    root: List[String]


class Equals(RootModel[List[String]]):
    root: List[String]


class FilterCondition(BaseModel):
    EqualsValue: Optional[NonEmptyString] = None
    GreaterThan: Optional[LongValue] = None
    LessThan: Optional[LongValue] = None


class FilterCriterion(BaseModel):
    CriterionKey_1: Optional[CriterionKey] = Field(None, alias='CriterionKey')
    FilterCondition_1: Optional[FilterCondition] = Field(None, alias='FilterCondition')


class FilterCriterionList(RootModel[List[FilterCriterion]]):
    root: List[FilterCriterion] = Field(..., max_length=1, min_length=0)


class FindingStatistics(BaseModel):
    CountBySeverity_1: Optional[CountBySeverity] = Field(None, alias='CountBySeverity')


class FlagsList(RootModel[List[String]]):
    root: List[String]


class FreeTrialFeatureConfigurationResult(BaseModel):
    FreeTrialDaysRemaining: Optional[Integer] = None
    Name: Optional[FreeTrialFeatureResult] = None


class FreeTrialFeatureConfigurationsResults(
    RootModel[List[FreeTrialFeatureConfigurationResult]]
):
    root: List[FreeTrialFeatureConfigurationResult]


class GetAdministratorAccountResponse(BaseModel):
    Administrator_1: Administrator = Field(..., alias='Administrator')


class GetCoverageStatisticsResponse(BaseModel):
    CoverageStatistics_1: Optional[CoverageStatistics] = Field(
        None, alias='CoverageStatistics'
    )


class GetFindingsStatisticsResponse(BaseModel):
    FindingStatistics_1: FindingStatistics = Field(..., alias='FindingStatistics')


class GetInvitationsCountResponse(BaseModel):
    InvitationsCount: Optional[Integer] = None


class GetUsageStatisticsResponse(BaseModel):
    NextToken: Optional[String] = None
    UsageStatistics_1: Optional[UsageStatistics] = Field(None, alias='UsageStatistics')


class Groups(RootModel[List[String]]):
    root: List[String]


class HighestSeverityThreatDetails(BaseModel):
    Count: Optional[Integer] = None
    Severity: Optional[String] = None
    ThreatName: Optional[String] = None


class HostPath(BaseModel):
    Path: Optional[String] = None


class IamInstanceProfile(BaseModel):
    Arn: Optional[String] = None
    Id: Optional[String] = None


class Invitation(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    InvitationId: Optional[String] = None
    InvitedAt: Optional[String] = None
    RelationshipStatus: Optional[String] = None


class Invitations(RootModel[List[Invitation]]):
    root: List[Invitation] = Field(..., max_length=50, min_length=0)


class InviteMembersRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')
    DisableEmailNotification: Optional[Boolean] = None
    Message: Optional[String] = None


class InviteMembersResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class IpSetIds(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=50, min_length=0)


class Ipv6Addresses(RootModel[List[String]]):
    root: List[String]


class KubernetesDataSourceFreeTrial(BaseModel):
    AuditLogs: Optional[DataSourceFreeTrial] = None


class KubernetesUserDetails(BaseModel):
    Groups_1: Optional[Groups] = Field(None, alias='Groups')
    Uid: Optional[String] = None
    Username: Optional[String] = None


class LineageObject(BaseModel):
    Euid: Optional[Integer] = None
    ExecutablePath: Optional[String] = None
    Name: Optional[String] = None
    NamespacePid: Optional[Integer] = None
    ParentUuid: Optional[String] = None
    Pid: Optional[Integer] = None
    StartTime: Optional[Timestamp] = None
    UserId: Optional[Integer] = None
    Uuid: Optional[String] = None


class ListDetectorsResponse(BaseModel):
    DetectorIds_1: DetectorIds = Field(..., alias='DetectorIds')
    NextToken: Optional[String] = None


class ListFiltersResponse(BaseModel):
    FilterNames_1: FilterNames = Field(..., alias='FilterNames')
    NextToken: Optional[String] = None


class ListFindingsResponse(BaseModel):
    FindingIds_1: FindingIds = Field(..., alias='FindingIds')
    NextToken: Optional[String] = None


class ListIPSetsResponse(BaseModel):
    IpSetIds_1: IpSetIds = Field(..., alias='IpSetIds')
    NextToken: Optional[String] = None


class ListInvitationsResponse(BaseModel):
    Invitations_1: Optional[Invitations] = Field(None, alias='Invitations')
    NextToken: Optional[String] = None


class ListOrganizationAdminAccountsResponse(BaseModel):
    AdminAccounts_1: Optional[AdminAccounts] = Field(None, alias='AdminAccounts')
    NextToken: Optional[String] = None


class ListPublishingDestinationsResponse(BaseModel):
    Destinations_1: Destinations = Field(..., alias='Destinations')
    NextToken: Optional[String] = None


class ListThreatIntelSetsResponse(BaseModel):
    NextToken: Optional[String] = None
    ThreatIntelSetIds_1: ThreatIntelSetIds = Field(..., alias='ThreatIntelSetIds')


class LocalIpDetails(BaseModel):
    IpAddressV4: Optional[String] = None


class LocalPortDetails(BaseModel):
    Port: Optional[Integer] = None
    PortName: Optional[String] = None


class LoginAttribute(BaseModel):
    Application: Optional[String] = None
    FailedLoginAttempts: Optional[Integer] = None
    SuccessfulLoginAttempts: Optional[Integer] = None
    User: Optional[String] = None


class LoginAttributes(RootModel[List[LoginAttribute]]):
    root: List[LoginAttribute]


class MalwareProtectionConfiguration(BaseModel):
    ScanEc2InstanceWithFindings_1: Optional[ScanEc2InstanceWithFindings] = Field(
        None, alias='ScanEc2InstanceWithFindings'
    )


class MalwareProtectionDataSourceFreeTrial(BaseModel):
    ScanEc2InstanceWithFindings: Optional[DataSourceFreeTrial] = None


class Master(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    InvitationId: Optional[String] = None
    InvitedAt: Optional[String] = None
    RelationshipStatus: Optional[String] = None


class Member(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    AdministratorId: Optional[String] = None
    DetectorId_1: Optional[DetectorId] = Field(None, alias='DetectorId')
    Email_1: Email = Field(..., alias='Email')
    InvitedAt: Optional[String] = None
    MasterId: String
    RelationshipStatus: String
    UpdatedAt: String


class MemberAdditionalConfiguration(BaseModel):
    Name: Optional[OrgFeatureAdditionalConfiguration] = None
    Status: Optional[FeatureStatus] = None


class MemberAdditionalConfigurationResult(BaseModel):
    Name: Optional[OrgFeatureAdditionalConfiguration] = None
    Status: Optional[FeatureStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class MemberAdditionalConfigurationResults(
    RootModel[List[MemberAdditionalConfigurationResult]]
):
    root: List[MemberAdditionalConfigurationResult]


class MemberAdditionalConfigurations(RootModel[List[MemberAdditionalConfiguration]]):
    root: List[MemberAdditionalConfiguration]


class MemberFeaturesConfiguration(BaseModel):
    AdditionalConfiguration: Optional[MemberAdditionalConfigurations] = None
    Name: Optional[OrgFeature] = None
    Status: Optional[FeatureStatus] = None


class MemberFeaturesConfigurationResult(BaseModel):
    AdditionalConfiguration: Optional[MemberAdditionalConfigurationResults] = None
    Name: Optional[OrgFeature] = None
    Status: Optional[FeatureStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class MemberFeaturesConfigurations(RootModel[List[MemberFeaturesConfiguration]]):
    root: List[MemberFeaturesConfiguration]


class MemberFeaturesConfigurationsResults(
    RootModel[List[MemberFeaturesConfigurationResult]]
):
    root: List[MemberFeaturesConfigurationResult]


class Members(RootModel[List[Member]]):
    root: List[Member] = Field(..., max_length=50, min_length=0)


class MemoryRegionsList(RootModel[List[String]]):
    root: List[String]


class Neq(RootModel[List[String]]):
    root: List[String]


class NotEquals(RootModel[List[String]]):
    root: List[String]


class Organization(BaseModel):
    Asn: Optional[String] = None
    AsnOrg: Optional[String] = None
    Isp: Optional[String] = None
    Org: Optional[String] = None


class OrganizationMalwareProtectionConfiguration(BaseModel):
    ScanEc2InstanceWithFindings: Optional[OrganizationScanEc2InstanceWithFindings] = (
        None
    )


class OrganizationMalwareProtectionConfigurationResult(BaseModel):
    ScanEc2InstanceWithFindings: Optional[
        OrganizationScanEc2InstanceWithFindingsResult
    ] = None


class Owner(BaseModel):
    Id: Optional[String] = None


class PrivateIpAddressDetails(BaseModel):
    PrivateDnsName: Optional[String] = None
    PrivateIpAddress: Optional[String] = None


class PrivateIpAddresses(RootModel[List[PrivateIpAddressDetails]]):
    root: List[PrivateIpAddressDetails]


class ProductCode(BaseModel):
    Code: Optional[String] = None
    ProductType: Optional[String] = None


class ProductCodes(RootModel[List[ProductCode]]):
    root: List[ProductCode]


class RdsDbInstanceDetails(BaseModel):
    DbClusterIdentifier: Optional[String] = None
    DbInstanceArn: Optional[String] = None
    DbInstanceIdentifier: Optional[String] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class RdsDbUserDetails(BaseModel):
    Application: Optional[String] = None
    AuthMethod: Optional[String] = None
    Database: Optional[String] = None
    Ssl: Optional[String] = None
    User: Optional[String] = None


class RemoteAccountDetails(BaseModel):
    AccountId: Optional[String] = None
    Affiliated: Optional[Boolean] = None


class RemoteIpDetails(BaseModel):
    City_1: Optional[City] = Field(None, alias='City')
    Country_1: Optional[Country] = Field(None, alias='Country')
    GeoLocation_1: Optional[GeoLocation] = Field(None, alias='GeoLocation')
    IpAddressV4: Optional[String] = None
    Organization_1: Optional[Organization] = Field(None, alias='Organization')


class RemotePortDetails(BaseModel):
    Port: Optional[Integer] = None
    PortName: Optional[String] = None


class ResourceList(RootModel[List[String]]):
    root: List[String]


class Scan(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    AdminDetectorId: Optional[DetectorId] = None
    AttachedVolumes: Optional[VolumeDetails] = None
    DetectorId_1: Optional[DetectorId] = Field(None, alias='DetectorId')
    FailureReason: Optional[NonEmptyString] = None
    FileCount: Optional[PositiveLong] = None
    ResourceDetails_1: Optional[ResourceDetails] = Field(None, alias='ResourceDetails')
    ScanEndTime: Optional[Timestamp] = None
    ScanId: Optional[NonEmptyString] = None
    ScanResultDetails_1: Optional[ScanResultDetails] = Field(
        None, alias='ScanResultDetails'
    )
    ScanStartTime: Optional[Timestamp] = None
    ScanStatus_1: Optional[ScanStatus] = Field(None, alias='ScanStatus')
    TotalBytes: Optional[PositiveLong] = None
    TriggerDetails_1: Optional[TriggerDetails] = Field(None, alias='TriggerDetails')


class ScanConditionPair(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class ScanEc2InstanceWithFindingsResult(BaseModel):
    EbsVolumes: Optional[EbsVolumesResult] = None


class ScanFilePath(BaseModel):
    FileName: Optional[String] = None
    FilePath: Optional[String] = None
    Hash: Optional[String] = None
    VolumeArn: Optional[String] = None


class Scans(RootModel[List[Scan]]):
    root: List[Scan]


class SecurityGroup(BaseModel):
    GroupId: Optional[String] = None
    GroupName: Optional[String] = None


class SecurityGroups(RootModel[List[SecurityGroup]]):
    root: List[SecurityGroup]


class ServiceAdditionalInfo(BaseModel):
    Type: Optional[String] = None
    Value: Optional[String] = None


class SourceIps(RootModel[List[String]]):
    root: List[String]


class Sources(RootModel[List[String]]):
    root: List[String]


class StartMonitoringMembersResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class StopMonitoringMembersResponse(BaseModel):
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    Tags: TagMap


class ThreatIntelligenceDetail(BaseModel):
    ThreatListName: Optional[String] = None
    ThreatNames_1: Optional[ThreatNames] = Field(None, alias='ThreatNames')


class ThreatIntelligenceDetails(RootModel[List[ThreatIntelligenceDetail]]):
    root: List[ThreatIntelligenceDetail]


class UpdatePublishingDestinationRequest(BaseModel):
    DestinationProperties_1: Optional[DestinationProperties] = Field(
        None, alias='DestinationProperties'
    )


class UsageCriteria(BaseModel):
    AccountIds_1: Optional[AccountIds] = Field(None, alias='AccountIds')
    DataSources: Optional[DataSourceList] = None
    Features: Optional[UsageFeatureList] = None
    Resources: Optional[ResourceList] = None


class Volume(BaseModel):
    HostPath_1: Optional[HostPath] = Field(None, alias='HostPath')
    Name: Optional[String] = None


class Volumes(RootModel[List[Volume]]):
    root: List[Volume]


class VpcConfig(BaseModel):
    SecurityGroups_1: Optional[SecurityGroups] = Field(None, alias='SecurityGroups')
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    VpcId: Optional[String] = None


class DataSources(BaseModel):
    Kubernetes: Optional[KubernetesConfiguration] = None
    MalwareProtection: Optional[MalwareProtectionConfiguration] = None
    S3Logs: Optional[S3LogsConfiguration] = None


class DetectorPostRequest(BaseModel):
    clientToken: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The idempotency token for the create request.'
    )
    dataSources: Optional[DataSources] = Field(
        None, description='Contains information about which data sources are enabled.'
    )
    enable: bool = Field(
        ...,
        description='A Boolean value that specifies whether the detector is to be enabled.',
    )
    features: Optional[List[DetectorFeatureConfiguration]] = Field(
        None, description='A list of features that will be configured for the detector.'
    )
    findingPublishingFrequency: Optional[FindingPublishingFrequency] = Field(
        None,
        description='A value that specifies how frequently updated findings are exported.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to be added to a new detector resource.'
    )


class DetectorDetectorIdPostRequest(BaseModel):
    dataSources: Optional[DataSources] = Field(
        None, description='Contains information about which data sources are enabled.'
    )
    enable: Optional[bool] = Field(
        None, description='Specifies whether the detector is enabled or not enabled.'
    )
    features: Optional[List[DetectorFeatureConfiguration]] = Field(
        None, description='Provides the features that will be updated for the detector.'
    )
    findingPublishingFrequency: Optional[FindingPublishingFrequency] = Field(
        None,
        description='An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.',
    )


class DataSources2(BaseModel):
    Kubernetes: Optional[OrganizationKubernetesConfiguration] = None
    MalwareProtection: Optional[OrganizationMalwareProtectionConfiguration] = None
    S3Logs: Optional[OrganizationS3LogsConfiguration] = None


class DetectorDetectorIdAdminPostRequest(BaseModel):
    autoEnable: Optional[bool] = Field(
        None,
        description='<p>Indicates whether to automatically enable member accounts in the organization.</p> <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results.</p>',
    )
    autoEnableOrganizationMembers: Optional[AutoEnableOrganizationMembers] = Field(
        None,
        description='<p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. </p> <ul> <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li> <li> <p> <code>ALL</code>: Indicates that all accounts in the Amazon Web Services Organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> </li> <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any accounts in the organization. GuardDuty must be managed for each account individually by the administrator.</p> </li> </ul>',
    )
    dataSources: Optional[DataSources2] = Field(
        None,
        description='An object that contains information on which data sources will be configured to be automatically enabled for new members within the organization.',
    )
    features: Optional[List[OrganizationFeatureConfiguration]] = Field(
        None,
        description='A list of features that will be configured for the organization.',
    )


class FilterCriteria(BaseModel):
    FilterCriterion: Optional[FilterCriterionList] = None


class DetectorDetectorIdMalwareScansPostRequest(BaseModel):
    filterCriteria: Optional[FilterCriteria] = Field(
        None,
        description='Represents the criteria to be used in the filter for describing scan entries.',
    )
    maxResults: Optional[conint(ge=1, le=50)] = Field(
        None,
        description='You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.',
    )
    nextToken: Optional[str] = Field(
        None,
        description='You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.',
    )
    sortCriteria: Optional[SortCriteria2] = Field(
        None,
        description='Contains information about the criteria used for sorting findings.',
    )


class DetectorDetectorIdMemberPostRequest(BaseModel):
    accountDetails: List[AccountDetail] = Field(
        ...,
        description='A list of account ID and email address pairs of the accounts that you want to associate with the GuardDuty administrator account.',
        max_length=50,
        min_length=1,
    )


class DataSources3(BaseModel):
    Kubernetes: Optional[KubernetesConfiguration] = None
    MalwareProtection: Optional[MalwareProtectionConfiguration] = None
    S3Logs: Optional[S3LogsConfiguration] = None


class DetectorDetectorIdMemberDetectorUpdatePostRequest(BaseModel):
    accountIds: List[AccountId] = Field(
        ...,
        description='A list of member account IDs to be updated.',
        max_length=50,
        min_length=1,
    )
    dataSources: Optional[DataSources3] = Field(
        None, description='Contains information about which data sources are enabled.'
    )
    features: Optional[List[MemberFeaturesConfiguration]] = Field(
        None,
        description='A list of features that will be updated for the specified member accounts.',
    )


class DetectorDetectorIdUsageStatisticsPostRequest(BaseModel):
    maxResults: Optional[conint(ge=1, le=50)] = Field(
        None, description='The maximum number of results to return in the response.'
    )
    nextToken: Optional[str] = Field(
        None,
        description='A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.',
    )
    unit: Optional[str] = Field(
        None,
        description='The currency unit you would like to view your usage statistics in. Current valid values are USD.',
    )
    usageCriteria: UsageCriteria = Field(
        ...,
        description='Contains information about the criteria used to query usage statistics.',
    )
    usageStatisticsType: UsageStatisticsType = Field(
        ..., description='The type of usage statistics to retrieve.'
    )


class AccountLevelPermissions(BaseModel):
    BlockPublicAccess_1: Optional[BlockPublicAccess] = Field(
        None, alias='BlockPublicAccess'
    )


class AwsApiCallAction(BaseModel):
    AffectedResources_1: Optional[AffectedResources] = Field(
        None, alias='AffectedResources'
    )
    Api: Optional[String] = None
    CallerType: Optional[String] = None
    DomainDetails_1: Optional[DomainDetails] = Field(None, alias='DomainDetails')
    ErrorCode: Optional[String] = None
    RemoteAccountDetails_1: Optional[RemoteAccountDetails] = Field(
        None, alias='RemoteAccountDetails'
    )
    RemoteIpDetails_1: Optional[RemoteIpDetails] = Field(None, alias='RemoteIpDetails')
    ServiceName: Optional[String] = None
    UserAgent: Optional[String] = None


class Condition(BaseModel):
    Eq_1: Optional[Eq] = Field(None, alias='Eq')
    Equals_1: Optional[Equals] = Field(None, alias='Equals')
    GreaterThan: Optional[Long] = None
    GreaterThanOrEqual: Optional[Long] = None
    Gt: Optional[Integer] = None
    Gte: Optional[Integer] = None
    LessThan: Optional[Long] = None
    LessThanOrEqual: Optional[Long] = None
    Lt: Optional[Integer] = None
    Lte: Optional[Integer] = None
    Neq_1: Optional[Neq] = Field(None, alias='Neq')
    NotEquals_1: Optional[NotEquals] = Field(None, alias='NotEquals')


class CoverageFilterCondition(BaseModel):
    Equals_1: Optional[Equals] = Field(None, alias='Equals')
    NotEquals_1: Optional[NotEquals] = Field(None, alias='NotEquals')


class CoverageFilterCriterion(BaseModel):
    CriterionKey: Optional[CoverageFilterCriterionKey] = None
    FilterCondition: Optional[CoverageFilterCondition] = None


class CoverageFilterCriterionList(RootModel[List[CoverageFilterCriterion]]):
    root: List[CoverageFilterCriterion] = Field(..., max_length=50, min_length=0)


class CoverageResource(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    CoverageStatus_1: Optional[CoverageStatus] = Field(None, alias='CoverageStatus')
    DetectorId_1: Optional[DetectorId] = Field(None, alias='DetectorId')
    Issue: Optional[String] = None
    ResourceDetails: Optional[CoverageResourceDetails] = None
    ResourceId: Optional[String] = None
    UpdatedAt: Optional[Timestamp] = None


class CoverageResources(RootModel[List[CoverageResource]]):
    root: List[CoverageResource]


class CreateIPSetRequest(BaseModel):
    Activate: Boolean
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Format: IpSetFormat
    Location_1: Location = Field(..., alias='Location')
    Name_1: Name = Field(..., alias='Name')
    Tags: Optional[TagMap] = None


class CreatePublishingDestinationRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    DestinationProperties_1: DestinationProperties = Field(
        ..., alias='DestinationProperties'
    )
    DestinationType_1: DestinationType = Field(..., alias='DestinationType')


class CreateThreatIntelSetRequest(BaseModel):
    Activate: Boolean
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Format: ThreatIntelSetFormat
    Location_1: Location = Field(..., alias='Location')
    Name_1: Name = Field(..., alias='Name')
    Tags: Optional[TagMap] = None


class Criterion(RootModel[Optional[Dict[str, Condition]]]):
    root: Optional[Dict[str, Condition]] = None


class DataSourceConfigurations(BaseModel):
    Kubernetes: Optional[KubernetesConfiguration] = None
    MalwareProtection: Optional[MalwareProtectionConfiguration] = None
    S3Logs: Optional[S3LogsConfiguration] = None


class DataSourcesFreeTrial(BaseModel):
    CloudTrail: Optional[DataSourceFreeTrial] = None
    DnsLogs: Optional[DataSourceFreeTrial] = None
    FlowLogs: Optional[DataSourceFreeTrial] = None
    Kubernetes: Optional[KubernetesDataSourceFreeTrial] = None
    MalwareProtection: Optional[MalwareProtectionDataSourceFreeTrial] = None
    S3Logs: Optional[DataSourceFreeTrial] = None


class DescribeMalwareScansResponse(BaseModel):
    NextToken: Optional[String] = None
    Scans_1: Scans = Field(..., alias='Scans')


class DescribePublishingDestinationResponse(BaseModel):
    DestinationId: String
    DestinationProperties_1: DestinationProperties = Field(
        ..., alias='DestinationProperties'
    )
    DestinationType_1: DestinationType = Field(..., alias='DestinationType')
    PublishingFailureStartTimestamp: Long
    Status: PublishingStatus


class EcsTaskDetails(BaseModel):
    Arn: Optional[String] = None
    Containers_1: Optional[Containers] = Field(None, alias='Containers')
    DefinitionArn: Optional[String] = None
    Group: Optional[String] = None
    StartedAt: Optional[Timestamp] = None
    StartedBy: Optional[String] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TaskCreatedAt: Optional[Timestamp] = None
    Version: Optional[String] = None
    Volumes_1: Optional[Volumes] = Field(None, alias='Volumes')


class Evidence(BaseModel):
    ThreatIntelligenceDetails_1: Optional[ThreatIntelligenceDetails] = Field(
        None, alias='ThreatIntelligenceDetails'
    )


class FilePaths(RootModel[List[ScanFilePath]]):
    root: List[ScanFilePath]


class FindingCriteria(BaseModel):
    Criterion_1: Optional[Criterion] = Field(None, alias='Criterion')


class GetFilterResponse(BaseModel):
    Action: FilterAction
    Description: Optional[FilterDescription] = None
    FindingCriteria_1: FindingCriteria = Field(..., alias='FindingCriteria')
    Name: FilterName
    Rank: Optional[FilterRank] = None
    Tags: Optional[TagMap] = None


class GetFindingsRequest(BaseModel):
    FindingIds_1: FindingIds = Field(..., alias='FindingIds')
    SortCriteria: Optional[SortCriteria2] = None


class GetFindingsStatisticsRequest(BaseModel):
    FindingCriteria_1: Optional[FindingCriteria] = Field(None, alias='FindingCriteria')
    FindingStatisticTypes_1: FindingStatisticTypes = Field(
        ..., alias='FindingStatisticTypes'
    )


class GetIPSetResponse(BaseModel):
    Format: IpSetFormat
    Location_1: Location = Field(..., alias='Location')
    Name_1: Name = Field(..., alias='Name')
    Status: IpSetStatus
    Tags: Optional[TagMap] = None


class GetMasterAccountResponse(BaseModel):
    Master_1: Master = Field(..., alias='Master')


class GetMembersResponse(BaseModel):
    Members_1: Members = Field(..., alias='Members')
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class GetThreatIntelSetResponse(BaseModel):
    Format: ThreatIntelSetFormat
    Location_1: Location = Field(..., alias='Location')
    Name_1: Name = Field(..., alias='Name')
    Status: ThreatIntelSetStatus
    Tags: Optional[TagMap] = None


class GetUsageStatisticsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None
    Unit: Optional[String] = None
    UsageCriteria_1: UsageCriteria = Field(..., alias='UsageCriteria')
    UsageStatisticType_1: UsageStatisticType = Field(..., alias='UsageStatisticType')


class KubernetesApiCallAction(BaseModel):
    Parameters: Optional[String] = None
    RemoteIpDetails_1: Optional[RemoteIpDetails] = Field(None, alias='RemoteIpDetails')
    RequestUri: Optional[String] = None
    SourceIps_1: Optional[SourceIps] = Field(None, alias='SourceIps')
    StatusCode: Optional[Integer] = None
    UserAgent: Optional[String] = None
    Verb: Optional[String] = None


class KubernetesWorkloadDetails(BaseModel):
    Containers_1: Optional[Containers] = Field(None, alias='Containers')
    HostNetwork: Optional[Boolean] = None
    Name: Optional[String] = None
    Namespace: Optional[String] = None
    Type: Optional[String] = None
    Uid: Optional[String] = None
    Volumes_1: Optional[Volumes] = Field(None, alias='Volumes')


class LambdaDetails(BaseModel):
    Description: Optional[String] = None
    FunctionArn: Optional[String] = None
    FunctionName: Optional[String] = None
    FunctionVersion: Optional[String] = None
    LastModifiedAt: Optional[Timestamp] = None
    RevisionId: Optional[String] = None
    Role: Optional[String] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class Lineage(RootModel[List[LineageObject]]):
    root: List[LineageObject]


class ListCoverageResponse(BaseModel):
    NextToken: Optional[String] = None
    Resources: CoverageResources


class ListFindingsRequest(BaseModel):
    FindingCriteria_1: Optional[FindingCriteria] = Field(None, alias='FindingCriteria')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None
    SortCriteria: Optional[SortCriteria2] = None


class ListMembersResponse(BaseModel):
    Members_1: Optional[Members] = Field(None, alias='Members')
    NextToken: Optional[String] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class MalwareProtectionConfigurationResult(BaseModel):
    ScanEc2InstanceWithFindings: Optional[ScanEc2InstanceWithFindingsResult] = None
    ServiceRole: Optional[String] = None


class MapEquals(RootModel[List[ScanConditionPair]]):
    root: List[ScanConditionPair]


class NetworkConnectionAction(BaseModel):
    Blocked: Optional[Boolean] = None
    ConnectionDirection: Optional[String] = None
    LocalIpDetails_1: Optional[LocalIpDetails] = Field(None, alias='LocalIpDetails')
    LocalPortDetails_1: Optional[LocalPortDetails] = Field(
        None, alias='LocalPortDetails'
    )
    Protocol: Optional[String] = None
    RemoteIpDetails_1: Optional[RemoteIpDetails] = Field(None, alias='RemoteIpDetails')
    RemotePortDetails_1: Optional[RemotePortDetails] = Field(
        None, alias='RemotePortDetails'
    )


class NetworkInterface(BaseModel):
    Ipv6Addresses_1: Optional[Ipv6Addresses] = Field(None, alias='Ipv6Addresses')
    NetworkInterfaceId: Optional[String] = None
    PrivateDnsName: Optional[String] = None
    PrivateIpAddress: Optional[String] = None
    PrivateIpAddresses_1: Optional[PrivateIpAddresses] = Field(
        None, alias='PrivateIpAddresses'
    )
    PublicDnsName: Optional[String] = None
    PublicIp: Optional[String] = None
    SecurityGroups_1: Optional[SecurityGroups] = Field(None, alias='SecurityGroups')
    SubnetId: Optional[String] = None
    VpcId: Optional[String] = None


class NetworkInterfaces(RootModel[List[NetworkInterface]]):
    root: List[NetworkInterface]


class OrganizationDataSourceConfigurations(BaseModel):
    Kubernetes: Optional[OrganizationKubernetesConfiguration] = None
    MalwareProtection: Optional[OrganizationMalwareProtectionConfiguration] = None
    S3Logs: Optional[OrganizationS3LogsConfiguration] = None


class OrganizationDataSourceConfigurationsResult(BaseModel):
    Kubernetes: Optional[OrganizationKubernetesConfigurationResult] = None
    MalwareProtection: Optional[OrganizationMalwareProtectionConfigurationResult] = None
    S3Logs: OrganizationS3LogsConfigurationResult


class PermissionConfiguration(BaseModel):
    AccountLevelPermissions_1: Optional[AccountLevelPermissions] = Field(
        None, alias='AccountLevelPermissions'
    )
    BucketLevelPermissions_1: Optional[BucketLevelPermissions] = Field(
        None, alias='BucketLevelPermissions'
    )


class PortProbeDetail(BaseModel):
    LocalIpDetails_1: Optional[LocalIpDetails] = Field(None, alias='LocalIpDetails')
    LocalPortDetails_1: Optional[LocalPortDetails] = Field(
        None, alias='LocalPortDetails'
    )
    RemoteIpDetails_1: Optional[RemoteIpDetails] = Field(None, alias='RemoteIpDetails')


class PortProbeDetails(RootModel[List[PortProbeDetail]]):
    root: List[PortProbeDetail]


class ProcessDetails(BaseModel):
    Euid: Optional[Integer] = None
    ExecutablePath: Optional[String] = None
    ExecutableSha256: Optional[String] = None
    Lineage_1: Optional[Lineage] = Field(None, alias='Lineage')
    Name: Optional[String] = None
    NamespacePid: Optional[Integer] = None
    ParentUuid: Optional[String] = None
    Pid: Optional[Integer] = None
    Pwd: Optional[String] = None
    StartTime: Optional[Timestamp] = None
    User: Optional[String] = None
    UserId: Optional[Integer] = None
    Uuid: Optional[String] = None


class PublicAccess(BaseModel):
    EffectivePermission: Optional[String] = None
    PermissionConfiguration_1: Optional[PermissionConfiguration] = Field(
        None, alias='PermissionConfiguration'
    )


class RdsLoginAttemptAction(BaseModel):
    LoginAttributes_1: Optional[LoginAttributes] = Field(None, alias='LoginAttributes')
    RemoteIpDetails_1: Optional[RemoteIpDetails] = Field(None, alias='RemoteIpDetails')


class RuntimeContext(BaseModel):
    AddressFamily: Optional[String] = None
    FileSystemType: Optional[String] = None
    Flags: Optional[FlagsList] = None
    IanaProtocolNumber: Optional[Integer] = None
    LdPreloadValue: Optional[String] = None
    LibraryPath: Optional[String] = None
    MemoryRegions: Optional[MemoryRegionsList] = None
    ModifiedAt: Optional[Timestamp] = None
    ModifyingProcess: Optional[ProcessDetails] = None
    ModuleFilePath: Optional[String] = None
    ModuleName: Optional[String] = None
    ModuleSha256: Optional[String] = None
    MountSource: Optional[String] = None
    MountTarget: Optional[String] = None
    ReleaseAgentPath: Optional[String] = None
    RuncBinaryPath: Optional[String] = None
    ScriptPath: Optional[String] = None
    ShellHistoryFilePath: Optional[String] = None
    SocketPath: Optional[String] = None
    TargetProcess: Optional[ProcessDetails] = None


class RuntimeDetails(BaseModel):
    Context: Optional[RuntimeContext] = None
    Process: Optional[ProcessDetails] = None


class S3BucketDetail(BaseModel):
    Arn: Optional[String] = None
    CreatedAt: Optional[Timestamp] = None
    DefaultServerSideEncryption_1: Optional[DefaultServerSideEncryption] = Field(
        None, alias='DefaultServerSideEncryption'
    )
    Name: Optional[String] = None
    Owner_1: Optional[Owner] = Field(None, alias='Owner')
    PublicAccess_1: Optional[PublicAccess] = Field(None, alias='PublicAccess')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[String] = None


class S3BucketDetails(RootModel[List[S3BucketDetail]]):
    root: List[S3BucketDetail]


class ScanCondition(BaseModel):
    MapEquals_1: MapEquals = Field(..., alias='MapEquals')


class ScanCriterion(RootModel[Optional[Dict[str, ScanCondition]]]):
    root: Optional[Dict[str, ScanCondition]] = None


class ScanResourceCriteria(BaseModel):
    Exclude: Optional[ScanCriterion] = None
    Include: Optional[ScanCriterion] = None


class ScanThreatName(BaseModel):
    FilePaths_1: Optional[FilePaths] = Field(None, alias='FilePaths')
    ItemCount: Optional[Integer] = None
    Name: Optional[String] = None
    Severity: Optional[String] = None


class ScanThreatNames(RootModel[List[ScanThreatName]]):
    root: List[ScanThreatName]


class ThreatDetectedByName(BaseModel):
    ItemCount: Optional[Integer] = None
    Shortened: Optional[Boolean] = None
    ThreatNames: Optional[ScanThreatNames] = None
    UniqueThreatNameCount: Optional[Integer] = None


class UnprocessedDataSourcesResult(BaseModel):
    MalwareProtection: Optional[MalwareProtectionConfigurationResult] = None


class UpdateDetectorRequest(BaseModel):
    DataSources: Optional[DataSourceConfigurations] = None
    Enable: Optional[Boolean] = None
    Features: Optional[DetectorFeatureConfigurations] = None
    FindingPublishingFrequency_1: Optional[FindingPublishingFrequency] = Field(
        None, alias='FindingPublishingFrequency'
    )


class UpdateFilterRequest(BaseModel):
    Action: Optional[FilterAction] = None
    Description: Optional[FilterDescription] = None
    FindingCriteria_1: Optional[FindingCriteria] = Field(None, alias='FindingCriteria')
    Rank: Optional[FilterRank] = None


class UpdateMalwareScanSettingsRequest(BaseModel):
    EbsSnapshotPreservation_1: Optional[EbsSnapshotPreservation] = Field(
        None, alias='EbsSnapshotPreservation'
    )
    ScanResourceCriteria_1: Optional[ScanResourceCriteria] = Field(
        None, alias='ScanResourceCriteria'
    )


class UpdateMemberDetectorsRequest(BaseModel):
    AccountIds_1: AccountIds = Field(..., alias='AccountIds')
    DataSources: Optional[DataSourceConfigurations] = None
    Features: Optional[MemberFeaturesConfigurations] = None


class UpdateOrganizationConfigurationRequest(BaseModel):
    AutoEnable: Optional[Boolean] = None
    AutoEnableOrganizationMembers: Optional[AutoEnableMembers] = None
    DataSources: Optional[OrganizationDataSourceConfigurations] = None
    Features: Optional[OrganizationFeaturesConfigurations] = None


class FilterCriteria1(BaseModel):
    FilterCriterion: Optional[CoverageFilterCriterionList] = None


class DetectorDetectorIdCoveragePostRequest(BaseModel):
    filterCriteria: Optional[FilterCriteria1] = Field(
        None, description='Represents the criteria used in the filter.'
    )
    maxResults: Optional[conint(ge=1, le=50)] = Field(
        None, description='The maximum number of results to return in the response.'
    )
    nextToken: Optional[str] = Field(
        None,
        description='A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.',
    )
    sortCriteria: Optional[SortCriteria] = Field(
        None,
        description='Information about the sorting criteria used in the coverage statistics.',
    )


class DetectorDetectorIdCoverageStatisticsPostRequest(BaseModel):
    filterCriteria: Optional[FilterCriteria1] = Field(
        None, description='Represents the criteria used in the filter.'
    )
    statisticsType: List[CoverageStatisticsType] = Field(
        ...,
        description='Represents the statistics type used to aggregate the coverage details.',
    )


class DetectorDetectorIdFilterPostRequest(BaseModel):
    action: Optional[Action1] = Field(
        None,
        description='Specifies the action that is to be applied to the findings that match the filter.',
    )
    clientToken: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The idempotency token for the create request.'
    )
    description: Optional[constr(min_length=0, max_length=512)] = Field(
        None,
        description='The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.',
    )
    findingCriteria: FindingCriteria = Field(
        ...,
        description='Contains information about the criteria used for querying findings.',
    )
    name: constr(min_length=3, max_length=64) = Field(
        ...,
        description='The name of the filter. Valid characters include period (.), underscore (_), dash (-), and alphanumeric characters. A whitespace is considered to be an invalid character.',
    )
    rank: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to be added to a new filter resource.'
    )


class DetectorDetectorIdFilterFilterNamePostRequest(BaseModel):
    action: Optional[Action1] = Field(
        None,
        description='Specifies the action that is to be applied to the findings that match the filter.',
    )
    description: Optional[constr(min_length=0, max_length=512)] = Field(
        None,
        description='The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.',
    )
    findingCriteria: Optional[FindingCriteria] = Field(
        None,
        description='Contains information about the criteria used for querying findings.',
    )
    rank: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.',
    )


class DetectorDetectorIdFindingsPostRequest(BaseModel):
    findingCriteria: Optional[FindingCriteria] = Field(
        None,
        description='Contains information about the criteria used for querying findings.',
    )
    maxResults: Optional[conint(ge=1, le=50)] = Field(
        None,
        description='You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.',
    )
    nextToken: Optional[str] = Field(
        None,
        description='You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.',
    )
    sortCriteria: Optional[SortCriteria2] = Field(
        None,
        description='Contains information about the criteria used for sorting findings.',
    )


class DetectorDetectorIdFindingsStatisticsPostRequest(BaseModel):
    findingCriteria: Optional[FindingCriteria] = Field(
        None,
        description='Contains information about the criteria used for querying findings.',
    )
    findingStatisticTypes: List[FindingStatisticType] = Field(
        ...,
        description='The types of finding statistics to retrieve.',
        max_length=10,
        min_length=0,
    )


class DetectorDetectorIdMalwareScanSettingsPostRequest(BaseModel):
    ebsSnapshotPreservation: Optional[EbsSnapshotPreservation] = Field(
        None,
        description='An enum value representing possible snapshot preservation settings.',
    )
    scanResourceCriteria: Optional[ScanResourceCriteria] = Field(
        None,
        description='Contains information about criteria used to filter resources before triggering malware scan.',
    )


class AccountFreeTrialInfo(BaseModel):
    AccountId: Optional[String] = None
    DataSources: Optional[DataSourcesFreeTrial] = None
    Features: Optional[FreeTrialFeatureConfigurationsResults] = None


class AccountFreeTrialInfos(RootModel[List[AccountFreeTrialInfo]]):
    root: List[AccountFreeTrialInfo]


class CoverageFilterCriteria(BaseModel):
    FilterCriterion: Optional[CoverageFilterCriterionList] = None


class CreateDetectorRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    DataSources: Optional[DataSourceConfigurations] = None
    Enable: Boolean
    Features: Optional[DetectorFeatureConfigurations] = None
    FindingPublishingFrequency_1: Optional[FindingPublishingFrequency] = Field(
        None, alias='FindingPublishingFrequency'
    )
    Tags: Optional[TagMap] = None


class CreateDetectorResponse(BaseModel):
    DetectorId_1: Optional[DetectorId] = Field(None, alias='DetectorId')
    UnprocessedDataSources: Optional[UnprocessedDataSourcesResult] = None


class CreateFilterRequest(BaseModel):
    Action: Optional[FilterAction] = None
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Description: Optional[FilterDescription] = None
    FindingCriteria_1: FindingCriteria = Field(..., alias='FindingCriteria')
    Name: FilterName
    Rank: Optional[FilterRank] = None
    Tags: Optional[TagMap] = None


class DataSourceConfigurationsResult(BaseModel):
    CloudTrail: CloudTrailConfigurationResult
    DNSLogs: DNSLogsConfigurationResult
    FlowLogs: FlowLogsConfigurationResult
    Kubernetes: Optional[KubernetesConfigurationResult] = None
    MalwareProtection: Optional[MalwareProtectionConfigurationResult] = None
    S3Logs: S3LogsConfigurationResult


class DescribeMalwareScansRequest(BaseModel):
    FilterCriteria_1: Optional[FilterCriteria] = Field(None, alias='FilterCriteria')
    MaxResults: Optional[IntegerValueWithMax] = None
    NextToken: Optional[String] = None
    SortCriteria: Optional[SortCriteria2] = None


class DescribeOrganizationConfigurationResponse(BaseModel):
    AutoEnable: Optional[Boolean] = None
    AutoEnableOrganizationMembers: Optional[AutoEnableMembers] = None
    DataSources: Optional[OrganizationDataSourceConfigurationsResult] = None
    Features: Optional[OrganizationFeaturesConfigurationsResults] = None
    MemberAccountLimitReached: Boolean
    NextToken: Optional[String] = None


class EcsClusterDetails(BaseModel):
    ActiveServicesCount: Optional[Integer] = None
    Arn: Optional[String] = None
    Name: Optional[String] = None
    RegisteredContainerInstancesCount: Optional[Integer] = None
    RunningTasksCount: Optional[Integer] = None
    Status: Optional[String] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TaskDetails: Optional[EcsTaskDetails] = None


class GetCoverageStatisticsRequest(BaseModel):
    FilterCriteria: Optional[CoverageFilterCriteria] = None
    StatisticsType: CoverageStatisticsTypeList


class GetDetectorResponse(BaseModel):
    CreatedAt: Optional[String] = None
    DataSources: Optional[DataSourceConfigurationsResult] = None
    Features: Optional[DetectorFeatureConfigurationsResults] = None
    FindingPublishingFrequency_1: Optional[FindingPublishingFrequency] = Field(
        None, alias='FindingPublishingFrequency'
    )
    ServiceRole: String
    Status: DetectorStatus
    Tags: Optional[TagMap] = None
    UpdatedAt: Optional[String] = None


class GetMalwareScanSettingsResponse(BaseModel):
    EbsSnapshotPreservation_1: Optional[EbsSnapshotPreservation] = Field(
        None, alias='EbsSnapshotPreservation'
    )
    ScanResourceCriteria_1: Optional[ScanResourceCriteria] = Field(
        None, alias='ScanResourceCriteria'
    )


class GetRemainingFreeTrialDaysResponse(BaseModel):
    Accounts: Optional[AccountFreeTrialInfos] = None
    UnprocessedAccounts_1: Optional[UnprocessedAccounts] = Field(
        None, alias='UnprocessedAccounts'
    )


class InstanceDetails(BaseModel):
    AvailabilityZone: Optional[String] = None
    IamInstanceProfile_1: Optional[IamInstanceProfile] = Field(
        None, alias='IamInstanceProfile'
    )
    ImageDescription: Optional[String] = None
    ImageId: Optional[String] = None
    InstanceId: Optional[String] = None
    InstanceState: Optional[String] = None
    InstanceType: Optional[String] = None
    LaunchTime: Optional[String] = None
    NetworkInterfaces_1: Optional[NetworkInterfaces] = Field(
        None, alias='NetworkInterfaces'
    )
    OutpostArn: Optional[String] = None
    Platform: Optional[String] = None
    ProductCodes_1: Optional[ProductCodes] = Field(None, alias='ProductCodes')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class KubernetesDetails(BaseModel):
    KubernetesUserDetails_1: Optional[KubernetesUserDetails] = Field(
        None, alias='KubernetesUserDetails'
    )
    KubernetesWorkloadDetails_1: Optional[KubernetesWorkloadDetails] = Field(
        None, alias='KubernetesWorkloadDetails'
    )


class ListCoverageRequest(BaseModel):
    FilterCriteria: Optional[CoverageFilterCriteria] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None
    SortCriteria: Optional[CoverageSortCriteria] = None


class MemberDataSourceConfiguration(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    DataSources: Optional[DataSourceConfigurationsResult] = None
    Features: Optional[MemberFeaturesConfigurationsResults] = None


class MemberDataSourceConfigurations(RootModel[List[MemberDataSourceConfiguration]]):
    root: List[MemberDataSourceConfiguration] = Field(..., max_length=50, min_length=1)


class PortProbeAction(BaseModel):
    Blocked: Optional[Boolean] = None
    PortProbeDetails_1: Optional[PortProbeDetails] = Field(
        None, alias='PortProbeDetails'
    )


class Resource(BaseModel):
    AccessKeyDetails_1: Optional[AccessKeyDetails] = Field(
        None, alias='AccessKeyDetails'
    )
    ContainerDetails: Optional[Container] = None
    EbsVolumeDetails_1: Optional[EbsVolumeDetails] = Field(
        None, alias='EbsVolumeDetails'
    )
    EcsClusterDetails_1: Optional[EcsClusterDetails] = Field(
        None, alias='EcsClusterDetails'
    )
    EksClusterDetails_1: Optional[EksClusterDetails] = Field(
        None, alias='EksClusterDetails'
    )
    InstanceDetails_1: Optional[InstanceDetails] = Field(None, alias='InstanceDetails')
    KubernetesDetails_1: Optional[KubernetesDetails] = Field(
        None, alias='KubernetesDetails'
    )
    LambdaDetails_1: Optional[LambdaDetails] = Field(None, alias='LambdaDetails')
    RdsDbInstanceDetails_1: Optional[RdsDbInstanceDetails] = Field(
        None, alias='RdsDbInstanceDetails'
    )
    RdsDbUserDetails_1: Optional[RdsDbUserDetails] = Field(
        None, alias='RdsDbUserDetails'
    )
    ResourceType: Optional[String] = None
    S3BucketDetails_1: Optional[S3BucketDetails] = Field(None, alias='S3BucketDetails')


class ScanDetections(BaseModel):
    HighestSeverityThreatDetails_1: Optional[HighestSeverityThreatDetails] = Field(
        None, alias='HighestSeverityThreatDetails'
    )
    ScannedItemCount_1: Optional[ScannedItemCount] = Field(
        None, alias='ScannedItemCount'
    )
    ThreatDetectedByName_1: Optional[ThreatDetectedByName] = Field(
        None, alias='ThreatDetectedByName'
    )
    ThreatsDetectedItemCount_1: Optional[ThreatsDetectedItemCount] = Field(
        None, alias='ThreatsDetectedItemCount'
    )


class Action(BaseModel):
    ActionType: Optional[String] = None
    AwsApiCallAction_1: Optional[AwsApiCallAction] = Field(
        None, alias='AwsApiCallAction'
    )
    DnsRequestAction_1: Optional[DnsRequestAction] = Field(
        None, alias='DnsRequestAction'
    )
    KubernetesApiCallAction_1: Optional[KubernetesApiCallAction] = Field(
        None, alias='KubernetesApiCallAction'
    )
    NetworkConnectionAction_1: Optional[NetworkConnectionAction] = Field(
        None, alias='NetworkConnectionAction'
    )
    PortProbeAction_1: Optional[PortProbeAction] = Field(None, alias='PortProbeAction')
    RdsLoginAttemptAction_1: Optional[RdsLoginAttemptAction] = Field(
        None, alias='RdsLoginAttemptAction'
    )


class EbsVolumeScanDetails(BaseModel):
    ScanCompletedAt: Optional[Timestamp] = None
    ScanDetections_1: Optional[ScanDetections] = Field(None, alias='ScanDetections')
    ScanId: Optional[String] = None
    ScanStartedAt: Optional[Timestamp] = None
    Sources_1: Optional[Sources] = Field(None, alias='Sources')
    TriggerFindingId: Optional[String] = None


class GetMemberDetectorsResponse(BaseModel):
    MemberDataSourceConfigurations_1: MemberDataSourceConfigurations = Field(
        ..., alias='MemberDataSourceConfigurations'
    )
    UnprocessedAccounts_1: UnprocessedAccounts = Field(..., alias='UnprocessedAccounts')


class Service(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    AdditionalInfo: Optional[ServiceAdditionalInfo] = None
    Archived: Optional[Boolean] = None
    Count: Optional[Integer] = None
    DetectorId_1: Optional[DetectorId] = Field(None, alias='DetectorId')
    EbsVolumeScanDetails_1: Optional[EbsVolumeScanDetails] = Field(
        None, alias='EbsVolumeScanDetails'
    )
    EventFirstSeen: Optional[String] = None
    EventLastSeen: Optional[String] = None
    Evidence_1: Optional[Evidence] = Field(None, alias='Evidence')
    FeatureName: Optional[String] = None
    ResourceRole: Optional[String] = None
    RuntimeDetails_1: Optional[RuntimeDetails] = Field(None, alias='RuntimeDetails')
    ServiceName: Optional[String] = None
    UserFeedback: Optional[String] = None


class Finding(BaseModel):
    AccountId: String
    Arn: String
    Confidence: Optional[Double] = None
    CreatedAt: String
    Description: Optional[String] = None
    Id: String
    Partition: Optional[String] = None
    Region: String
    Resource_1: Resource = Field(..., alias='Resource')
    SchemaVersion: String
    Service_1: Optional[Service] = Field(None, alias='Service')
    Severity: Double
    Title: Optional[String] = None
    Type: FindingType
    UpdatedAt: String


class Findings(RootModel[List[Finding]]):
    root: List[Finding] = Field(..., max_length=50, min_length=0)


class GetFindingsResponse(BaseModel):
    Findings_1: Findings = Field(..., alias='Findings')
